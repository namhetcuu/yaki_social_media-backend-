package com.zosh.zosh_social_youtube.service;

import com.zosh.zosh_social_youtube.dto.request.ChatRequest;
import com.zosh.zosh_social_youtube.dto.response.ChatResponse;
import com.zosh.zosh_social_youtube.entity.Chat;
import com.zosh.zosh_social_youtube.entity.User;
import com.zosh.zosh_social_youtube.exception.AppException;
import com.zosh.zosh_social_youtube.exception.ErrorCode;
import com.zosh.zosh_social_youtube.mapper.ChatMapper;
import com.zosh.zosh_social_youtube.repository.ChatRepository;
import com.zosh.zosh_social_youtube.repository.UserRepository;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class ChatService {

    ChatRepository chatRepository;
    ChatMapper chatMapper;
    UserRepository userRepository;
    UserService userService;

    @Transactional
    public ChatResponse findOrCreatePersonalChat(String userId1, String userId2, String chatImage) {
        log.info("Checking for existing personal chat between {} and {}", userId1, userId2);

        // Chuy·ªÉn userId t·ª´ String -> User tr∆∞·ªõc khi t√¨m chat
        User user1 = userService.findUserById(userId1);
        User user2 = userService.findUserById(userId2);

        // Ki·ªÉm tra n·∫øu userId1 == userId2 (kh√¥ng cho ph√©p chat v·ªõi ch√≠nh m√¨nh)
        if (user1.getId().equals(user2.getId())) {
            throw new IllegalArgumentException("A user cannot chat with themselves.");
        }

        // Ki·ªÉm tra xem cu·ªôc tr√≤ chuy·ªán ƒë√£ t·ªìn t·∫°i ch∆∞a
        List<Chat> existingChats = chatRepository.findPersonalChat(user1, user2);
        for (Chat chat : existingChats) {
            if (chat.getUsers().size() == 2) { // Ch·ªâ l·∫•y chat c√≥ ƒë√∫ng 2 ng∆∞·ªùi
                log.info("Existing personal chat found: {}", chat.getId());
                return chatMapper.toChatResponse(chat);
            }
        }

        // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi cu·ªôc tr√≤ chuy·ªán
        log.info("No existing chat found. Creating a new personal chat.");

        Chat newChat = Chat.builder()
                .chatName("Private Chat") // Ho·∫∑c ƒë·∫∑t theo t√™n user
                .chatImage(chatImage)
                .users(List.of(user1, user2))
                .build();

        Chat savedChat = chatRepository.save(newChat);
        return chatMapper.toChatResponse(savedChat);
    }




    public ChatResponse findChatById(String chatId) {
        log.info("T√¨m chat v·ªõi ID: {}", chatId);

        Chat chat = chatRepository.findById(chatId)
                .orElseThrow(() -> new AppException(ErrorCode.CHAT_NOT_FOUND));

        return chatMapper.toChatResponse(chat);
    }

    public List<ChatResponse> findUsersChat(String userId) {
        log.info("üîé T√¨m danh s√°ch chat c·ªßa userId: {}", userId);

        // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng, n·∫øu kh√¥ng th√¨ n√©m exception
        if (!userRepository.existsById(userId)) {
            throw new AppException(ErrorCode.USER_NOT_EXISTED);
        }

        // Truy v·∫•n danh s√°ch chat m√† user tham gia
        List<Chat> chats = chatRepository.findByUsers_Id(userId);

        log.info("‚úÖ T√¨m th·∫•y {} chat c·ªßa userId: {}", chats.size(), userId);

        // Chuy·ªÉn ƒë·ªïi danh s√°ch Chat th√†nh danh s√°ch ChatResponse
        return chats.stream()
                .map(chatMapper::toChatResponse)
                .collect(Collectors.toList());
    }

    @PreAuthorize("hasRole('ADMIN')")
    public void deleteChatById(String chatId) {
        log.info("Deleting user with ID: {}", chatId);
        chatRepository.deleteById(chatId);
    }

//    public void deleteAllChatsByUserId(Long userId) {
//
//    }


    //Ki·ªÉm tra xem hai ng∆∞·ªùi d√πng c√≥ chat chung kh√¥ng
    ///public Optional<Chat> findChatBetweenUsers(String userId1, String userId2);

    //X√≥a m·ªôt cu·ªôc tr√≤ chuy·ªán theo ID (ch·ªâ admin ho·∫∑c ch·ªß chat ƒë∆∞·ª£c ph√©p).
    //public void deleteChat(String chatId, String requesterId);

    //Th√™m ng∆∞·ªùi d√πng v√†o cu·ªôc tr√≤ chuy·ªán
    //public ChatResponse addUserToChat(String chatId, String userId);

    //X√≥a ng∆∞·ªùi d√πng kh·ªèi cu·ªôc tr√≤ chuy·ªán
    //public ChatResponse removeUserFromChat(String chatId, String userId);

    //Khi ng∆∞·ªùi d√πng g·ª≠i m·ªôt tin nh·∫Øn v√†o m·ªôt cu·ªôc tr√≤ chuy·ªán.
    //public MessageResponse sendMessage(MessageRequest messageRequest);

}
