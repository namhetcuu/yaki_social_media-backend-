package com.zosh.zosh_social_youtube.service;

import com.zosh.zosh_social_youtube.dto.request.ChatRequest;
import com.zosh.zosh_social_youtube.dto.response.ChatResponse;
import com.zosh.zosh_social_youtube.entity.Chat;
import com.zosh.zosh_social_youtube.entity.User;
import com.zosh.zosh_social_youtube.exception.AppException;
import com.zosh.zosh_social_youtube.exception.ErrorCode;
import com.zosh.zosh_social_youtube.mapper.ChatMapper;
import com.zosh.zosh_social_youtube.repository.ChatRepository;
import com.zosh.zosh_social_youtube.repository.UserRepository;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class ChatService {

    ChatRepository chatRepository;
    ChatMapper chatMapper;
    UserRepository userRepository;

    @Transactional
    public ChatResponse createChat(ChatRequest chatRequest) {
        log.info("T·∫°o chat m·ªõi v·ªõi t√™n: {}", chatRequest.getChatName());

        // L·∫•y danh s√°ch user t·ª´ userId
        List<User> users = userRepository.findAllById(chatRequest.getUserIds());
        if (users.isEmpty()) {
            throw new AppException(ErrorCode.USER_NOT_EXISTED);
        }

        // T·∫°o Chat entity
        Chat chat = Chat.builder()
                .chatName(chatRequest.getChatName())
                .chatImage(chatRequest.getChatImage())
                .users(users)
                .build();

        Chat savedChat = chatRepository.save(chat);
        log.info("Chat ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ID: {}", savedChat.getId());

        return chatMapper.toChatResponse(savedChat);
    }

    public ChatResponse findChatById(String chatId) {
        log.info("T√¨m chat v·ªõi ID: {}", chatId);

        Chat chat = chatRepository.findById(chatId)
                .orElseThrow(() -> new AppException(ErrorCode.CHAT_NOT_FOUND));

        return chatMapper.toChatResponse(chat);
    }

    public List<ChatResponse> findUsersChat(String userId) {
        log.info("üîé T√¨m danh s√°ch chat c·ªßa userId: {}", userId);

        // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng, n·∫øu kh√¥ng th√¨ n√©m exception
        if (!userRepository.existsById(userId)) {
            throw new AppException(ErrorCode.USER_NOT_EXISTED);
        }

        // Truy v·∫•n danh s√°ch chat m√† user tham gia
        List<Chat> chats = chatRepository.findByUsers_Id(userId);

        log.info("‚úÖ T√¨m th·∫•y {} chat c·ªßa userId: {}", chats.size(), userId);

        // Chuy·ªÉn ƒë·ªïi danh s√°ch Chat th√†nh danh s√°ch ChatResponse
        return chats.stream()
                .map(chatMapper::toChatResponse)
                .collect(Collectors.toList());
    }

    //Ki·ªÉm tra xem hai ng∆∞·ªùi d√πng c√≥ chat chung kh√¥ng
    ///public Optional<Chat> findChatBetweenUsers(String userId1, String userId2);

    //X√≥a m·ªôt cu·ªôc tr√≤ chuy·ªán theo ID (ch·ªâ admin ho·∫∑c ch·ªß chat ƒë∆∞·ª£c ph√©p).
    //public void deleteChat(String chatId, String requesterId);

    //Th√™m ng∆∞·ªùi d√πng v√†o cu·ªôc tr√≤ chuy·ªán
    //public ChatResponse addUserToChat(String chatId, String userId);

    //X√≥a ng∆∞·ªùi d√πng kh·ªèi cu·ªôc tr√≤ chuy·ªán
    //public ChatResponse removeUserFromChat(String chatId, String userId);

    //Khi ng∆∞·ªùi d√πng g·ª≠i m·ªôt tin nh·∫Øn v√†o m·ªôt cu·ªôc tr√≤ chuy·ªán.
    //public MessageResponse sendMessage(MessageRequest messageRequest);

}
