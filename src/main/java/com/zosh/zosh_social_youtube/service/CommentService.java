package com.zosh.zosh_social_youtube.service;

import com.zosh.zosh_social_youtube.dto.request.CommentRequest;
import com.zosh.zosh_social_youtube.dto.request.PostUpdateRequest;
import com.zosh.zosh_social_youtube.dto.response.CommentResponse;
import com.zosh.zosh_social_youtube.dto.response.PostResponse;
import com.zosh.zosh_social_youtube.entity.Comment;
import com.zosh.zosh_social_youtube.entity.Post;
import com.zosh.zosh_social_youtube.entity.SavedPost;
import com.zosh.zosh_social_youtube.entity.User;
import com.zosh.zosh_social_youtube.exception.AppException;
import com.zosh.zosh_social_youtube.exception.ErrorCode;
import com.zosh.zosh_social_youtube.mapper.CommentMapper;
import com.zosh.zosh_social_youtube.repository.CommentRepository;
import com.zosh.zosh_social_youtube.repository.PostRepository;
import com.zosh.zosh_social_youtube.repository.UserRepository;
import jakarta.transaction.Transactional;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class CommentService {

    private final CommentRepository commentRepository;
    private final UserRepository userRepository;
    private final PostRepository postRepository;
    private final CommentMapper commentMapper; // Mapper ƒë·ªÉ chuy·ªÉn t·ª´ entity sang response

    @Transactional
    public CommentResponse createComment(CommentRequest request) {

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (request.getUserId() == null || request.getPostId() == null || request.getContent() == null) {
            throw new AppException(ErrorCode.INTERNAL_SERVER_ERROR);
        }

        // L·∫•y user t·ª´ request
        User user = userRepository.findById(request.getUserId())
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));

        // L·∫•y b√†i vi·∫øt m√† comment thu·ªôc v·ªÅ
        Post post = postRepository.findById(request.getPostId())
                .orElseThrow(() -> new AppException(ErrorCode.POST_NOT_FOUND));

        // T·∫°o comment m·ªõi
        Comment comment = Comment.builder()
                .content(request.getContent())
                .user(user)
                .post(post)  // üëà B·∫Øt bu·ªôc ph·∫£i set post v√†o comment
                .createdAt(LocalDateTime.now()) // Set th·ªùi gian t·∫°o
                .updatedAt(LocalDateTime.now()) // Set th·ªùi gian c·∫≠p nh·∫≠t
                .build();

        // L∆∞u comment v√†o database
        Comment savedComment = commentRepository.save(comment);

        // Tr·∫£ v·ªÅ response
        return commentMapper.toCommentResponse(savedComment);
    }

//    @org.springframework.transaction.annotation.Transactional
//    public String deletePost(String postId, String userId) {
//        Post post = postRepository.findById(postId)
//                .orElseThrow(() -> new AppException(ErrorCode.POST_NOT_FOUND));
//
//        if (!post.getUser().getId().equals(userId)) {
//            throw new AppException(ErrorCode.UNAUTHORIZED_ACTION);
//        }
//
//        // X√≥a c√°c b·∫£n ghi li√™n quan trong b·∫£ng saved_posts tr∆∞·ªõc khi x√≥a b√†i vi·∫øt
//        savedPostRepository.deleteByPostId(postId);
//
//        // X√≥a b√†i vi·∫øt
//        postRepository.delete(post);
//        return "Post deleted successfully";
//    }



    /**
     * L·∫•y t·∫•t c·∫£ b√†i vi·∫øt
     */
//    public List<PostResponse> getAllPosts() {
//        return postRepository.findAll()
//                .stream()
//                .map(postMapper::toPostResponse)
//                .collect(Collectors.toList());
//    }

    /**
     * L·∫•y Comment theo Id
     */
    public List<CommentResponse> getCommentsByPostId(String postId) {
        // Ki·ªÉm tra xem b√†i vi·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
        Post post = postRepository.findById(postId)
                .orElseThrow(() -> new AppException(ErrorCode.POST_NOT_FOUND));

        // L·∫•y danh s√°ch comment c·ªßa b√†i vi·∫øt
        List<Comment> comments = commentRepository.findByPost_Id(postId);

        // Chuy·ªÉn ƒë·ªïi danh s√°ch comment th√†nh danh s√°ch CommentResponse
        return comments.stream()
                .map(commentMapper::toCommentResponse)
                .collect(Collectors.toList());
    }

    public CommentResponse getCommentById(Long commentId) {
        // T√¨m b√¨nh lu·∫≠n theo ID
        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new AppException(ErrorCode.COMMENT_NOT_FOUND));

        // Chuy·ªÉn ƒë·ªïi th√†nh CommentResponse v√† tr·∫£ v·ªÅ
        return commentMapper.toCommentResponse(comment);
    }

    /**
     * L·∫•y danh s√°ch b√†i vi·∫øt theo userId
     */
//    public List<PostResponse> getPostByUserId(String userId) {
//        User user = userRepository.findById(userId)
//                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
//
//        return postRepository.findByUser(user)
//                .stream()
//                .map(postMapper::toPostResponse)
//                .collect(Collectors.toList());
//    }

    /**
     * C·∫≠p nh·∫≠t n·ªôi dung b√†i vi·∫øt
     */
//    @org.springframework.transaction.annotation.Transactional
//    public PostResponse updatePost(String postId,String userId, PostUpdateRequest request) {
//        Post post = postRepository.findById(userId)
//                .orElseThrow(() -> new AppException(ErrorCode.POST_NOT_FOUND));
//
//        if (request.getCaption() != null) {
//            post.setCaption(request.getCaption());
//        }
//        if (request.getImageUrl() != null) {
//            post.setImageUrl(request.getImageUrl());
//        }
//        if (request.getVideoUrl() != null) {
//            post.setVideoUrl(request.getVideoUrl());
//        }
//
//        post.setUpdatedAt(LocalDateTime.now());
//
//        return postMapper.toPostResponse(postRepository.save(post));
//    }

    /**
     * Ng∆∞·ªùi d√πng th√≠ch Comment
     */
    //Ph∆∞∆°ng th·ª©c likePost(String postId, String userId) x·ª≠ l√Ω vi·ªác th√≠ch (like) ho·∫∑c b·ªè th√≠ch (unlike) m·ªôt b√†i vi·∫øt.
    //N·∫øu ng∆∞·ªùi d√πng ƒë√£ th√≠ch b√†i vi·∫øt tr∆∞·ªõc ƒë√≥, h·ªá th·ªëng s·∫Ω x√≥a l∆∞·ª£t th√≠ch (Unlike).
    //N·∫øu ch∆∞a th√≠ch, h·ªá th·ªëng s·∫Ω th√™m l∆∞·ª£t th√≠ch (Like).
    //@org.springframework.transaction.annotation.Transactional
    public CommentResponse likeComment(Long commentId, String userId) {
        // T√¨m b√¨nh lu·∫≠n theo commentId
        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new AppException(ErrorCode.COMMENT_NOT_FOUND));

        // T√¨m ng∆∞·ªùi d√πng theo userId
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ th√≠ch b√¨nh lu·∫≠n ch∆∞a
        if (comment.getLikedUsers().contains(user)) {
            // N·∫øu ƒë√£ th√≠ch th√¨ b·ªè th√≠ch
            comment.getLikedUsers().remove(user);
        } else {
            // N·∫øu ch∆∞a th√≠ch th√¨ th√™m v√†o danh s√°ch likedUsers
            comment.getLikedUsers().add(user);
        }

        // L∆∞u b√¨nh lu·∫≠n ƒë√£ c·∫≠p nh·∫≠t v√†o database
        commentRepository.save(comment);

        // Chuy·ªÉn ƒë·ªïi sang CommentResponse v√† tr·∫£ v·ªÅ
        return commentMapper.toCommentResponse(comment);
    }

}
